---
import Footer from '@components/Footer.astro'
import Header from '@components/Header.astro'
import BaseHead from '@components/partials/BaseHead.astro'
import Loading from '@components/partials/Loading.vue'
import { algolia, loader, site } from '@utils/config'
import { ViewTransitions } from 'astro:transitions'
import { cover } from '@utils/cover'
import { Image } from 'astro:assets'
import SiteSearch from '@components/thirdparty/SiteSearch.vue'
import { __ } from '@utils/i18n'

interface Props {
  title: string
  lang: string
  desc: string
  keywords?: string[]
}

const { title, lang, desc, keywords } = Astro.props;
---

<!doctype html>
<html lang={lang}>
<style is:global lang="stylus">
  @import "../styles/_colors"; 
</style>
  <head>
    <BaseHead title={title} description={desc} keywords={keywords} />
    <ViewTransitions />
    <slot name="head" />
  </head>
  <body itemscope itemtype="http://schema.org/WebPage">
    <Loading start={loader.start} client:only />
    <div id="container">
      <header id="header" itemscope itemtype="http://schema.org/WPHeader">
        <div class="inner">
          <div id="brand">
            <div class="pjax">
              <slot name="header">
                <a href={site.url ? site.url : '/'} class="logo" rel="start">
                  {site.alternate && <p class="artboard">{site.alternate}</p>}
                  <h1 itemprop="name headline" class="title">
                    {title}
                  </h1>
                  {
                    site.subtitle && (
                      <p class="meta" itemprop="description">
                        {`= ${site.subtitle} =`}
                      </p>
                    )
                  }
                </a>
              </slot>
            </div>
          </div>
          <Header />
        </div>
        <div class="imgs" class="pjax">
          {
            cover.fixedCover && (
              <Image
                src={cover.fixedCover}
                alt="header img"
                width={1280}
                height={800}
              />
            )
          }
          {
            !cover.fixedCover
            && {
                /* TODO */
              }
          }
        </div>
      </header>
      <div class="waves">
        <svg
          class="waves"
          xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          viewBox="0 24 150 28"
          preserveAspectRatio="none"
          shape-rendering="auto"
        >
          <defs>
            <path
              id="gentle-wave"
              d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
            ></path>
          </defs>
          <g class="parallax">
            <use xlink:href="#gentle-wave" x="48" y="0"></use>
            <use xlink:href="#gentle-wave" x="48" y="3"></use>
            <use xlink:href="#gentle-wave" x="48" y="5"></use>
            <use xlink:href="#gentle-wave" x="48" y="7"></use>
          </g>
        </svg>
      </div>
      <main>
        <div class="inner">
          <div id="main" class="pjax">
            <slot name="content" />
          </div>
          <div id="sidebar">
            <slot name="sidebar">
              <!-- TODO -->
            </slot>
          </div>
          <div class="dimmer"></div>
        </div>
      </main>
      <footer id="footer">
        <div class="inner">
          <div class="widgets">
            <!-- TODO -->
          </div>
          <Footer />
        </div>
      </footer>
    </div>
    {
      algolia.enable && (
        <SiteSearch
          client:idle
          appID={algolia.appId}
          apiKey={algolia.apiKey}
          indexName={algolia.indexName}
          url={site.url as string}
          placeholder={__('search.placeholder')}
          empty={__('search.empty')}
          stats={__('search.stats')}
        ></SiteSearch>
      )
    }
  </body>

</html>
